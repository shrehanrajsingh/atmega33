#if !defined(ASSEMBLER_H)
#define ASSEMBLER_H

#include "header.h"
#include "instgen.h"

/**
 * Since ATMeta32 follows RISC architecture
 * with instructions of size 2 or 4 byte only
 * our workload will be comparatively easier in
 * developing the assembler
 */

typedef struct
{
  int size; /* 2 or 4 bytes */
  int val;  /* if 2 then lower bytes will be occupied */
} abl_byte;

static const char *ABL_INST_2BYTE[] = { "IN",    "OUT", "ADD", "LDI", "RJMP",
                                        "RCALL", "SEC", "CEC", "NOP", NULL };

static const char *ABL_INST_4BYTE[] = { "LDS", "STS", "JMP", NULL };

#if defined(__cplusplus)
extern "C"
{
#endif // __cplusplus

  /**
   * Convert a line to bytecode.
   * This routine will only process instructions
   * that have valid bytecode representation
   * in memory.
   * Instructions such as labels and directives
   * will not be processed and return abl_byte with .size = 0
   * Also, this routine does not support macros and labels
   * @param buf Buffer
   * @return Generated bytecode for the instruction
   */
  abl_byte abl_codegen_fromline (char *);

  /**
   * Convert file contents to bytecode array
   * This routine takes into account macros and directives
   * and generates a bytecode array.
   * @param contents File contents
   * @return Generated stream of bytecode
   */
  abl_byte *abl_codegen_fromfile (char *_Contents);

#if defined(__cplusplus)
}
#endif // __cplusplus

#endif // ASSEMBLER_H
